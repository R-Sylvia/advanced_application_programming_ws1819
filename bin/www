#!/usr/bin/env node


/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('grabIT:server');
let http = require('http');
//let WebSocketServer = require('websocket').server;


let chatclass = require('./chat_class');
let gameclass = require('./game_logic');
let game = new gameclass();
let currentPlayerCount = 0;
let playersInGame = new Array(5)
for (let i = 0; i < playersInGame.length; i++){
    playersInGame[i] = false;
}
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);
/*let wsServer = new WebSocketServer({
    httpServer: server
});*/
let wsServer = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

let chat = new chatclass(wsServer);



server.listen(port);




wsServer.on('connection', function(socket){
    console.log('a user connected');
    console.log('client id:' + socket.id);
    socket.on('disconnect', function(){
        console.log('user disconnected');
    });
    socket.on('send message', function(msg){
        console.log('message: ' + msg);
        chat.broadcastMessage('chat message', msg);
    });

    // a new player wants to jon the game
    socket.on('start play', function(msg, callbackfn) {
        if (currentPlayerCount === 0) {
            game.initialise()
        }
        // try add player
        let ans = game.addPlayer(msg.user);
        if (ans === false) {
            console.log("can not add player")
            callbackfn({answer: false})
        } else {
            console.log("added new player")
            playersInGame[ans] = true
            console.log(playersInGame)
            chat.broadcastToRoom('new player', {id: ans})
            socket.join(chat.getRoomName())
            currentPlayerCount += 1;
            // answer the player with his id
            items = game.getItems()
            callbackfn({answer: true, id: ans,
                        array0: JSON.stringify(items.array0),
                        array1: JSON.stringify(items.array1),
                        array2: JSON.stringify(items.array2),
                        array3: JSON.stringify(items.array3),
                        array4: JSON.stringify(items.array4),
                        players: JSON.stringify(playersInGame)}
                        )

            // broadcast a message to all current players
            chat.broadcastToRoom('chat message', msg.user + ': i entered the game')
            // broadcast avatar array
            players = game.getPlayers()
            chat.broadcastToRoom('avatar positions', {  first: JSON.stringify(players[0]),
                                                        second: JSON.stringify(players[1]),
                                                        third: JSON.stringify(players[2]),
                                                        fourth: JSON.stringify(players[3]),
                                                        fifth: JSON.stringify(players[4])})
            // broadcast scores
            let scores = game.getScoresSorted()
            let names = scores.map(e => e.name)
            let points = scores.map(e => e.score)
            chat.broadcastToRoom('current scores', {names: JSON.stringify(names),
                                                    scores: JSON.stringify(points)})
        }
    })

    socket.on('position update', function(msg){
        // trigger collisiotn detection
        // new item array sent if new
        game.updatePlayerPosition(msg.id, JSON.parse(msg.position))
        items = game.detectCollision(msg.id)
        players = game.getPlayers()
        chat.broadcastToRoom('avatar positions', {  first: JSON.stringify(players[0]),
                                                    second: JSON.stringify(players[1]),
                                                    third: JSON.stringify(players[2]),
                                                    fourth: JSON.stringify(players[3]),
                                                    fifth: JSON.stringify(players[4])})

        if (items.length > 0) {
            chat.broadcastToRoom('delete items', {items: JSON.stringify(items)})
            // broadcast scores
            let scores = game.getScoresSorted()
            let names = scores.map(e => e.name)
            let points = scores.map(e => e.score)
            chat.broadcastToRoom('current scores', {names: JSON.stringify(names),
                                                    scores: JSON.stringify(points)})
            if (!game.getGameRunning()) {
                chat.broadcastToRoom('game ends', {})
                let finalscores = game.getScoresSorted()
                for (let i = 0; i < finalscores.length; i++) {
                    app.update(finalscores[i].name, finalscores[i].score)
                }
                currentPlayerCount = 0
                for (let i = 0; i < playersInGame.length; i++) {
                    playersInGame[i] = false
                }

            }
        }


    })

    socket.on('player quits', function(msg){
        console.log('player quits')
        app.update(msg.user, game.getPlayerScore(msg.id))
        // tell other players about leaving
        chat.broadcastToRoom('chat message', msg.user + ': i left the game')
        // remove the player from game by id
        finish = game.removePlayer(msg.id);
        // remove socket from room
        socket.leave(chat.getRoomName());
        playersInGame[msg.id] = false
        // update avatar list for other players
        if (finish) {
            currentPlayerCount = 0
            chat.broadcastToRoom('game ends', {})
            // TODO do something with final scores?
        } else {
            currentPlayerCount -= 1
            chat.broadcastToRoom('player left', {id : msg.id})
            // TODO save player score
            players = game.getPlayers()
            chat.broadcastToRoom('avatar positions', {  first: JSON.stringify(players[0]),
                                                        second: JSON.stringify(players[1]),
                                                        third: JSON.stringify(players[2]),
                                                        fourth: JSON.stringify(players[3]),
                                                        fifth: JSON.stringify(players[4])
            })
        }

    })

    // listener for request on Scoreboard outside the game
    socket.on('load main scoreboard', function(msg) {
        app.aggregate(function(responsedata) {
            console.log('result: ' + responsedata)
            socket.emit('update main scoreboard', {names: JSON.stringify(responsedata.names), scores: JSON.stringify(responsedata.scores)})
        })
    })

});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Saves the given Score to the database if no score entry for the player is there.
 * If the player already has a score saved, it updates the score if this one is higher than the old.
 */
function MaybeSaveScore(playername, score){

}

/**
 * Returns a sorted list of all stored playerscores, best first.
 */
function getScoreList(){

}